import { Component, OnInit } from '@angular/core';
import { ExploitationUnit } from './exploitation-unit.model';
import { ServiceArea } from '../service-area/service-area.model';
import { ActivatedRoute, Router } from '@angular/router';
import { ExploitationUnitService } from './exploitation-unit.service';
import { MatDialog } from '@angular/material/dialog';
import { ServiceAreaService } from '../service-area/service-area.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { DeleteComponent } from './delete/delete/delete.component';
import { HttpResponse } from '@angular/common/http';
import { Direction } from '@angular/cdk/bidi';
import { FormComponent as ExploitationUnitFormComponent } from './form/form/form.component';
import { FormComponent as RoomGroupFormComponent } from '../material-resource/room-group/form/form/form.component';

@Component({
  selector: 'app-exploitation-unit',
  templateUrl: './exploitation-unit.component.html',
  styleUrls: ['./exploitation-unit.component.scss']
})
export class ExploitationUnitComponent implements OnInit {
  exploitationUnits: ExploitationUnit[] = [];
  serviceAreaKey: number | undefined;

  serviceArea: ServiceArea | undefined;

  filtredExploitationUnits: ExploitationUnit[] = [];

  page = 1;
  items = 5;
  searchQuery = '';
  isLoading: boolean = false;

  constructor(
    private route: ActivatedRoute,
    private exploitationUnitService : ExploitationUnitService,
    private dialog: MatDialog,
    private serviceAreaService: ServiceAreaService,
    private snackBar: MatSnackBar,
    private router: Router,
  ) { }

  ngOnInit(): void {
    this.displayExploitationUnits();
    this.getParent();
  }

  displayExploitationUnits(): void {
    this.isLoading = true;
    const serviceAreaKyParam = this.route.snapshot.paramMap.get('servAreaKy');
    if (serviceAreaKyParam) {
      const servAreaKy = +serviceAreaKyParam;
      this.serviceAreaService.getChildElements(servAreaKy).subscribe(
        (data: ExploitationUnit[]) => {
          this.exploitationUnits = [...data];;
          this.filtredExploitationUnits = [...data];;
          this.isLoading = false;
        },
        (error: any) => {
          console.error('Error fetching exploitation units:', error);
          this.isLoading = false;
        }
      );
    }
  }

  refresh(){
    this.displayExploitationUnits();
  }

  searchExploitationUnits(): void {
    this.filtredExploitationUnits = this.exploitationUnits.filter(explUnit =>
      explUnit.explUnitNm.toLowerCase().includes(this.searchQuery.toLowerCase())
    );
  }

  hasRoomGroupElements(exploitationUnit: ExploitationUnit): boolean {
    return exploitationUnit.roomGrps?.length > 0;
  }

  getParent(): void {
    this.serviceAreaKey = this.getCurrentServiceAreaKey();
    this.serviceAreaService.getServiceAreaByKy(this.serviceAreaKey).subscribe(
      (serviceArea: ServiceArea) => {
        this.serviceArea = serviceArea;
      },
      (error: any) => {
        console.error(error);
      }
    );
  }

  getCurrentServiceAreaKey(): number {
    const urlSegments = this.route.snapshot.url;
    const serviceAreaKeyIndex = urlSegments.findIndex(segment => segment.path === 'service-area');
    if (serviceAreaKeyIndex !== -1 && serviceAreaKeyIndex + 1 < urlSegments.length) {
      return +urlSegments[serviceAreaKeyIndex + 1].path;
    }
    return 0;
  }

  onDelete(exploitationUnit: ExploitationUnit): void {
    const dialogRef = this.dialog.open(DeleteComponent, {
      data: exploitationUnit // Pass the name as data to the dialog
    });

    dialogRef.afterClosed().subscribe((result: boolean) => {
      if (result) {
        this.exploitationUnitService.deleteExploitationUnit(exploitationUnit.explUnitKy)
        .subscribe(
          (response: HttpResponse<any>) => {
            this.refresh();
            this.openSuccessSnackBar(exploitationUnit.explUnitNm + ' : deleted successfully');
          },
          (error: any) => {
            console.error('Error deleting exploitation unit:', error);
            this.openErrorSnackBar('Error deleting exploitation unit: '+exploitationUnit.explUnitNm);
          }
        );
      }
    });
  }

  openSuccessSnackBar(message: string): void {
    this.snackBar.open(message,'',{
      duration: 3000,
      horizontalPosition: 'start',
      panelClass: ["snackbar-success"]
    });
}

  openErrorSnackBar(message: string): void {
    this.snackBar.open(message,'',{
      duration: 3000,
      horizontalPosition: 'start',
      panelClass: ["snackbar-error"]
    });
  }

  fetchRoomGroups(expUnitKy: number): void {
    this.router.navigate(['admin','structure', 'exploitation-unit', expUnitKy, 'child-elements']);
  }

  edit(exploitationUnit : ExploitationUnit) {
    let tempDirection: Direction;
    if (localStorage.getItem('isRtl') === 'true') {
      tempDirection = 'rtl';
    } else {
      tempDirection = 'ltr';
    }
    const dialogRef = this.dialog.open(ExploitationUnitFormComponent, {
      data: {
        exploitationUnits: this.filtredExploitationUnits,
        exploitationUnit: exploitationUnit,
        action: 'edit',
      },
      direction: tempDirection,
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result === 1) {
        this.openSuccessSnackBar("Exploitation Unit Updated Successfully !")
      }
    });
  }

  addChild(exploitationUnit : ExploitationUnit){
    let tempDirection: Direction;
    if (localStorage.getItem('isRtl') === 'true') {
      tempDirection = 'rtl';
    } else {
      tempDirection = 'ltr';
    }

    const dialogRef = this.dialog.open(RoomGroupFormComponent, {
      data: {
        exploitationUnit: exploitationUnit,
        action: 'add-room-group',
      },
      direction: tempDirection,
    });

    dialogRef.afterClosed().subscribe((result) => {
      if (result === 1) {
        this.openSuccessSnackBar("Room Group Added Successfully !")
        this.refresh();
      }
    });
  }

}
