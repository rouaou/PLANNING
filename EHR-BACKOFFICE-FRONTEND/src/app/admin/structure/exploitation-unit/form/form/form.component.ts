import { Component, Inject, OnInit } from '@angular/core';
import { Direction } from '@angular/cdk/bidi';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { UntypedFormControl, Validators, UntypedFormGroup, UntypedFormBuilder, AsyncValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';
import { SiteGroupService } from 'app/admin/structure/site-group/site-group.service';
import { HttpClient } from '@angular/common/http';
import { ExploitationUnit } from '../../exploitation-unit.model';
import { ExploitationUnitService } from '../../exploitation-unit.service';
import { ServiceArea } from 'app/admin/structure/service-area/service-area.model';
import { ServiceAreaService } from 'app/admin/structure/service-area/service-area.service';

export interface DialogData {
  serviceArea: ServiceArea;
  exploitationUnits: ExploitationUnit[];//
  exploitationUnit: ExploitationUnit;//
  action: string;
}

@Component({
  selector: 'app-form',
  templateUrl: './form.component.html',
  styleUrls: ['./form.component.scss'],
})
export class FormComponent implements OnInit {
  action: string;
  dialogTitle?: string;

  serviceArea: ServiceArea;
  exploitationUnits: ExploitationUnit[];
  exploitationUnit: ExploitationUnit;

  exploitationUnitForm?: UntypedFormGroup;

  isAddExploitationUnitAction = false;
  isEditAction = false;

  formControl = new UntypedFormControl('', [
    Validators.required,
  ], );

  constructor(
    public dialogRef: MatDialogRef<FormComponent>,
    @Inject(MAT_DIALOG_DATA) public data: DialogData,
    public serviceAreaService: ServiceAreaService,
    public exploitationUnitService: ExploitationUnitService,
    private fb: UntypedFormBuilder,
    private http: HttpClient
  ) {
    this.action = data.action;
    this.serviceArea = data.serviceArea;

    this.exploitationUnits = data.exploitationUnits;
    this.exploitationUnit = data.exploitationUnit;
  }

  ngOnInit(): void {
    this.serviceArea = this.data.serviceArea;

    if (this.action === 'add-exploitation-unit') {
      this.dialogTitle = 'New Exploitation Unit';
      this.exploitationUnitForm = this.createExploitationUnitForm();
      this.isAddExploitationUnitAction = true;
      this.isEditAction = false;
    }
    if (this.action === 'edit') {
      this.dialogTitle = 'Update Exploitation Unit «'+ this.exploitationUnit.explUnitNm +'»';
      this.exploitationUnitForm = this.editExploitationUnitForm();
      this.isEditAction = true;
      this.isAddExploitationUnitAction = false;
    }

  }

  getErrorMessage() {
    if (this.formControl.hasError('required')) {
      return 'Required field';
    }

    if (this.formControl.hasError('duplicated')) {
      return 'duplicated field';
    }

    return '';
  }

  createExploitationUnitForm(): UntypedFormGroup {
    return this.fb.group({
      explUnitNm: ['', [Validators.required],[this.checkDuplicateExplUnitName(this.serviceArea.exploitationUnits)]],
      // Add other form fields as needed for the site group
    });
  }

  editExploitationUnitForm(): UntypedFormGroup {
    return this.fb.group({
      explUnitNm: [this.exploitationUnit.explUnitNm, [Validators.required],[this.checkDuplicateExplUnitName(this.exploitationUnits)]],
      // Add other form fields as needed for the site group
    });
  }

  submit() {
  }

  onNoClick(): void {
    this.dialogRef.close();
  }

  confirmAddChild(): void{
    if (this.exploitationUnitForm && this.exploitationUnitForm.valid) {
      const newExploitationUnit: Partial<ExploitationUnit> = {
        explUnitNm: this.exploitationUnitForm.get('explUnitNm')?.value,
        explUnitUnxTmCrt: new Date(),
        explUnitUnxTmUpdt: new Date(),
        explUnitRcrdSts: 1,
        roomGrps: []
      };
      this.serviceAreaService.addChildElement(this.serviceArea.servAreaKy,newExploitationUnit).subscribe(
        (response) => {
          this.dialogRef.close(1); // Return 1 to indicate successful addition
          //this.serviceArea.exploitationUnits.push(response);
        },
        (error) => {
          console.error('Error adding exploitation unit :', error);
        }
      );
  }
  }

  checkDuplicateExplUnitName(exploitationUnitList : ExploitationUnit[]): AsyncValidatorFn {
    return (control: AbstractControl): Promise<ValidationErrors | null> => {
      return new Promise((resolve) => {
        const inputExplUnitName = control.value;
        if (!inputExplUnitName) {
          resolve(null); // If the field is empty, no need to check for duplicates
        } else {
          const isDuplicate = exploitationUnitList.some(
            (explUnitItem) => explUnitItem.explUnitNm.toLowerCase() === inputExplUnitName.toLowerCase()
          );

          resolve(isDuplicate ? { duplicated: true } : null);
        }
      });
    };
  }

  confirmEdit(): void {
    if (this.exploitationUnitForm && this.exploitationUnitForm.valid) {

      this.exploitationUnit.explUnitNm = this.exploitationUnitForm.get('explUnitNm')?.value;
      this.exploitationUnit.explUnitUnxTmUpdt = new Date();

      this.exploitationUnitService.updateExploitationUnit(this.exploitationUnit.explUnitKy, this.exploitationUnit).subscribe(
        (response) => {
          this.dialogRef.close(1); // Return 1 to indicate successful update
        },
        (error) => {
          console.error('Error updating exploitation unit:', error);
        }
      );
    }
  }

}
